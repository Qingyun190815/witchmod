package witchmod.cards;

import com.megacrit.cardcrawl.actions.common.ApplyPowerAction;
import com.megacrit.cardcrawl.cards.AbstractCard;
import com.megacrit.cardcrawl.characters.AbstractPlayer;
import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
import com.megacrit.cardcrawl.monsters.AbstractMonster;
import com.megacrit.cardcrawl.powers.IntangiblePlayerPower;

public class NighInvulnerability extends AbstractWitchCleansableCurse {
    public static final String ID = "NighInvulnerability";  // 卡片ID
    public static final String NAME = "Nigh Invulnerability";  // 卡片名称
    public static final String IMG = "cards/nighinvulnerability.png";  // 卡片图片路径
    public static final String DESCRIPTION = "Unplayable. NL Cleanse: play 3 attacks this turn.";  // 未清除时的描述
    public static final String DESCRIPTION_CLEANSED = "Gain !M! Intangible.";  // 清除后的描述
    private static final CardRarity RARITY = CardRarity.UNCOMMON;  // 卡片稀有度
    private static final CardTarget TARGET = CardTarget.SELF;  // 目标：自己
    private static final CardType TYPE = CardType.SKILL;  // 卡片类型：技能

    private static final int COST = 1;  // 能量消耗
    private static final int POWER = 1;  // Intangible 数值
    private static final int THRESHOLD = 3;  // 清除条件：打出3张攻击卡

    public NighInvulnerability(boolean hasCardPreview) {
        super(ID, IMG, RARITY);
        this.magicNumber = this.baseMagicNumber = POWER;  // 设置魔法数（Intangible 数值）
        this.checkAtTurnStart = false;  // 禁用回合开始时检查
        if (hasCardPreview) {
            NighInvulnerability tmp = new NighInvulnerability(false);
            tmp.cleanse(false);  // 清除卡片预览
            cardPreviewTooltip = tmp;
        }
    }

    public NighInvulnerability() {
        this(true);  // 调用有卡片预览的构造函数
    }

    @Override
    public void cleanse(boolean applyPowers) {
        // 清除后的设置
        type = TYPE;  // 设置卡片类型为技能
        cost = COST;  // 设置能量消耗
        costForTurn = COST;  // 设置回合中的能量消耗
        isCostModified = false;  // 能量消耗不受影响
        target = TARGET;  // 目标为自己
        rawDescription = cardStrings.UPGRADE_DESCRIPTION;  // 设置清除后的描述
        initializeDescription();  // 初始化描述
        super.cleanse(applyPowers);  // 调用父类的清除方法
    }

    @Override
    public void use(AbstractPlayer p, AbstractMonster m) {
        // 检查玩家是否有蓝色蜡烛遗物并且卡片未清除
        if (!this.dontTriggerOnUseCard && p.hasRelic("Blue Candle") && !cleansed) {
            this.useBlueCandle(p);  // 使用蓝色蜡烛的效果
        } else {
            // 清除后，给予玩家 Intangible 效果
            AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(p, p, new IntangiblePlayerPower(p, magicNumber), magicNumber));
        }
    }

    @Override
    protected boolean cleanseCheck() {
        // 检查本回合是否使用了至少3张攻击卡
        int count = 0;
        for (AbstractCard c : AbstractDungeon.actionManager.cardsPlayedThisTurn) {
            if (c.type == CardType.ATTACK) {
                count++;
            }
        }
        return count >= THRESHOLD;  // 如果使用了3张攻击卡，返回true
    }

    @Override
    public AbstractCard makeCopy() {
        return new NighInvulnerability();  // 返回卡片副本
    }

    @Override
    public void upgrade() {
        // 升级后没有变化
    }
}
