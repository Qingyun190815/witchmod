package witchmod.cards;

import com.megacrit.cardcrawl.actions.common.ApplyPowerAction;
import com.megacrit.cardcrawl.cards.AbstractCard;
import com.megacrit.cardcrawl.characters.AbstractPlayer;
import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
import com.megacrit.cardcrawl.monsters.AbstractMonster;
import com.megacrit.cardcrawl.powers.IntangiblePlayerPower;

public class NighInvulnerability extends AbstractWitchCleansableCurse {
    public static final String ID = "NighInvulnerability";
    public static final String NAME = "Nigh Invulnerability";
    public static final String IMG = "cards/nighinvulnerability.png";
    public static final String DESCRIPTION = "Unplayable. NL Cleanse: play 3 attacks this turn.";
    public static final String DESCRIPTION_CLEANSED = "Gain !M! Intangible.";
    private static final CardRarity RARITY = CardRarity.UNCOMMON;
    private static final CardTarget TARGET = CardTarget.SELF;
    private static final CardType TYPE = CardType.SKILL;

    private static final int COST = 1;

    private static final int POWER = 1;
    private static final int THRESHOLD = 3;


    public NighInvulnerability(boolean hasCardPreview) {
        super(ID, IMG, RARITY);
        this.magicNumber = this.baseMagicNumber = POWER;
        this.checkAtTurnStart = false;
        if (hasCardPreview) {
            NighInvulnerability tmp = new NighInvulnerability(false);
            tmp.cleanse(false);
            cardPreviewTooltip = tmp;
        }
    }

    public NighInvulnerability() {
        this(true);
    }

    @Override
    public void cleanse(boolean applyPowers) {
        type = TYPE;
        cost = COST;
        costForTurn = COST;
        isCostModified = false;
        target = TARGET;
        rawDescription = cardStrings.UPGRADE_DESCRIPTION;
        initializeDescription();
        super.cleanse(applyPowers);
    }


    @Override
    public void use(AbstractPlayer p, AbstractMonster m) {
        if (!this.dontTriggerOnUseCard && p.hasRelic("Blue Candle") && !cleansed) {
            this.useBlueCandle(p);
        } else {
            AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(p, p, new IntangiblePlayerPower(p, magicNumber), magicNumber));
        }
    }

    @Override
    protected boolean cleanseCheck() {
        int count = 0;
        for (AbstractCard c : AbstractDungeon.actionManager.cardsPlayedThisTurn) {
            if (c.type == CardType.ATTACK) {
                count++;
            }
        }
        return count >= THRESHOLD;
    }


    public AbstractCard makeCopy() {
        return new NighInvulnerability();
    }

    public void upgrade() {

    }
}
