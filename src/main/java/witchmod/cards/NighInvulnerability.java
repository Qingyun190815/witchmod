package witchmod.cards;

import java.util.ArrayList;
import java.util.List;

import com.megacrit.cardcrawl.actions.common.ApplyPowerAction;
import com.megacrit.cardcrawl.cards.AbstractCard;
import com.megacrit.cardcrawl.characters.AbstractPlayer;
import com.megacrit.cardcrawl.dungeons.AbstractDungeon;
import com.megacrit.cardcrawl.monsters.AbstractMonster;
import com.megacrit.cardcrawl.powers.IntangiblePlayerPower;

import basemod.helpers.TooltipInfo;

public class NighInvulnerability extends AbstractWitchCleansableCurse {
	public static final String ID = "NighInvulnerability";
	public static final	String NAME = "Nigh Invulnerability";
	public static final	String NAME_CLEANSED = "Nigh Invulnerability";
	public static final	String IMG = "cards/placeholder_skill.png";
	public static final	String DESCRIPTION = "Unplayable. NL Cleanse: play 3 attacks this turn.";
	public static final	String DESCRIPTION_CLEANSED = "Reduce all damage to 1 for !M! turn.";
	private static final CardRarity RARITY = CardRarity.UNCOMMON;
	private static final CardTarget TARGET = CardTarget.SELF;
	private static final CardType TYPE = CardType.SKILL;

	private static final int COST = 1;

	private static final int POWER = 1;
	private static final int THRESHOLD = 3;



	public NighInvulnerability() {
		super(ID, NAME, IMG, DESCRIPTION, RARITY);
		this.magicNumber = this.baseMagicNumber = POWER;
		this.checkAtTurnStart = false;
	}
	
	@Override
	public List<TooltipInfo> getCustomTooltips() {
		List<TooltipInfo> out = new ArrayList<>();
		out.add(new TooltipInfo("Cleansed", "Skill, cost 1, reduce all damage to 1 for 1 turn."));
		return out;
	}

	@Override
	public void cleanse() {
		super.cleanse();
		type = TYPE;
		cost = COST;
		costForTurn = COST;
		isCostModified = false;
		target = TARGET;
		name = NAME_CLEANSED;
		rawDescription = DESCRIPTION_CLEANSED;
		initializeDescription();
	}



	@Override
	public void use(AbstractPlayer p, AbstractMonster m) {
		if (!this.dontTriggerOnUseCard && p.hasRelic("Blue Candle")) {
			this.useBlueCandle(p);
		} else {
			AbstractDungeon.actionManager.addToBottom(new ApplyPowerAction(p, p, new IntangiblePlayerPower(p,magicNumber),magicNumber));
		}
	}

	@Override
	protected boolean cleanseCheck() {
		int count = 0;
		for (AbstractCard c : AbstractDungeon.actionManager.cardsPlayedThisTurn) {
			if (c.type == CardType.ATTACK) {
				count++;
			}
		}
		return count >= THRESHOLD;
	}



	

	public AbstractCard makeCopy() {
		return new NighInvulnerability();
	}

	public void upgrade() {

	}
}
